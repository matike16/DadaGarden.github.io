import{_ as i,o as s,c as a,e as t}from"./app-8vm0M3an.js";const n={},e=t(`<p>Spring Boot对于关系型数据库和非关系型数据库的访问操作都提供了非常好的整合支持。例如MyBaties、JPA、Redis。</p><h2 id="spring-boot-数据库访问概述" tabindex="-1"><a class="header-anchor" href="#spring-boot-数据库访问概述"><span>Spring Boot 数据库访问概述</span></a></h2><p>Spring Boot 默认采用整合Spring Data的方式统一处理数据访问层，通过添加大量自动配置，引入各种数据访问模板<code>xxxTemplate</code>以及统一的Repository接口，从而达到简化数据访问层的操作。</p><div class="hint-container tip"><p class="hint-container-title">简单介绍一下Spring Data</p><p>Spring Data 是 Spring 框架的一个模板，它提供了一套简洁的编程模型来简化数据库操作。Spring Data 通过抽象化数据访问层，使得开发者可以不用编写大量的样板代码，就能实现对数据库的CRUD（创建、读取、更新、删除）操作。以下是Spring Data 的一些关键特性：</p><ul><li>Repository抽象</li><li>方法名定义查询</li><li>查询方法命名约定</li><li>多种数据库支持</li><li>集成JPA</li><li>事务管理</li><li>分页和排序</li><li>自定义查询</li><li>事件发布</li><li>集成测试支持</li></ul><p>Spring Data 的目标是减少数据访问层的样板代码，让开发者能够更专注于业务逻辑的实现，同时保持代码的简洁性和可维护性。</p></div><p>Spring Boot 对 Spring Data 支持的数据库进行了整合管理，提供了多种依赖启动器。以下是常见的：</p><table><thead><tr><th style="text-align:center;">名称</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">spring-boot-starter-data-jpa</td><td style="text-align:center;">Spring Data JPA 与 Hibernate 的启动器</td></tr><tr><td style="text-align:center;">spring-boot-starter-data-mongodb</td><td style="text-align:center;">MongoDB 和 Spring Data MongoDB 的启动器</td></tr><tr><td style="text-align:center;">spring-boot-starter-data-neo4j</td><td style="text-align:center;">Neo4j 图数据库和 Spring Data Neo4j 的启动器</td></tr><tr><td style="text-align:center;">spring-boot-starter-data-redis</td><td style="text-align:center;">Redis 键值数据存储与 Spring Data Redis 和 Jedis 客户端的启动器</td></tr></tbody></table><div class="hint-container important"><p class="hint-container-title">关于MyBatis依赖</p><p>Spring Boot 没有提供MyBatis场景依赖，但MyBatis开发团队提供了适配依赖—— <code>mybatis-spring-boot-starter</code></p></div><h2 id="spring-boot-整合-mybatis" tabindex="-1"><a class="header-anchor" href="#spring-boot-整合-mybatis"><span>Spring Boot 整合 MyBatis</span></a></h2><div class="hint-container tip"><p class="hint-container-title">简单介绍一下MyBatis</p><p>MyBatis 是一个流行的持久层框架，用于简化 Java 应用程序与数据库之间的交互。它提供了 SQL 映射和数据访问对象（DAO）的实现，使得开发者能够以更直观和灵活的方式进行数据库操作。</p><div class="hint-container important"><p class="hint-container-title">什么是&quot;持久层&quot;</p><p>在软件开发中，&quot;持久层&quot;（Persistence Layer）是应用程序架构中的一个层次，它负责数据的持久化，即将数据保存到数据库或其他形式的存储系统中，以及从存储系统中检索数据。</p><ul><li>持久化是指将数据保存到持久存储中，如硬盘或数据库，这样即使在应用程序关闭或系统重启后，数据也不会丢失。</li></ul><p>想象一下，你的电脑里有一个电子表格，里面记录了你的购物清单。这个电子表格就像是你的电脑里的一个“数据库”，它帮你记住了所有你想买的东西。</p><p>现在，如果你想要在你的电脑上创建一个新的购物清单，或者更新现有的清单，或者查询某个特定商品，你需要打开电子表格，然后手动输入或修改数据。这个过程就像是你在编写代码来操作数据库。</p><p>但是，如果你有一个助手，这个助手知道如何操作电子表格，并且可以自动帮你完成这些任务，那么你就不需要亲自动手了。这个助手就像是“持久层框架”。</p><p>持久层框架的“持久”部分，意味着它帮助你保存信息，就像你的电子表格保存购物清单一样。即使你关闭了电脑，购物清单的信息也不会消失。</p></div></div><h3 id="基础环境搭建" tabindex="-1"><a class="header-anchor" href="#基础环境搭建"><span>基础环境搭建</span></a></h3><p><strong>1. 准备数据</strong></p><p>通过 MySQL 或者 MySQL 管理工具 Navicat 创建好数据库和数据库表</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>基础建表语句此处不做阐述，仅讲解步骤。</p></div><p><strong>2.添加依赖</strong></p><p>在 Spring Boot 项目的 <code>pom.xml</code> 文件中添加 MyBatis 和数据库连接池的依赖。</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!-- Spring Boot Starter MyBatis --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;org.mybatis.spring.boot&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;mybatis-spring-boot-starter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;版本号&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    &lt;!-- 数据库驱动依赖，例如 MySQL --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;mysql&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;mysql-connector-java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><p>MySQL依赖在项目创建时，可以直接选择。</p></div><p><strong>3. 配置数据源</strong></p><p>在 <code>application.properties</code> 或 <code>application.yml</code> 文件中配置数据库连接信息。</p><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"># application.properties</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">jdbc:mysql://localhost:3306/数据库名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.username</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">用户名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.password</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">密码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.driver-class-name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">com.mysql.cj.jdbc.Driver</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">关于数据源</p><p>数据源，简单来说就是应用程序与数据库之间的桥梁。它负责提供数据库连接，允许应用程序执行查询、更新、插入和删除等操作。在数据库编程中，数据源通常包括以下关键要素：</p><ul><li>数据库连接信息</li><li>提供连接池</li><li>配置参数</li><li>事务处理</li></ul><p>在 Spring Boot 中，默认情况下，如果没有特别指定，它会使用内置的 Tomcat JDBC 连接池。但是，Spring Boot 支持多种数据库连接池，包括 HikariCP、DBCP2、Tomcat JDBC 等，你可以根据需要配置使用不同的连接池。</p><p>例如使用阿里巴巴的 Druid 数据源。</p><ul><li>先在<code>pom.xml</code>文件中添加依赖</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;com.alibaba&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifictId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;druid-spring-boot-starter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifictId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;版本号&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>接着在配置文件中添加数据源信息和参数配置</li></ul><div class="language-properties line-numbers-mode" data-highlighter="shiki" data-ext="properties" data-title="properties" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.url</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">jdbc:mysql://localhost:3306/数据库名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.username</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">用户名</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.password</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">密码</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">#添加第三方数据源Druid配置参数。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.type</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">com.alibaba.druid.pool.DruidDataSource</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.initialSize</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.minIdle</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">spring.datasource.maxActive</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#98C379;">100</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>自定义Druid配置类 在config包下创建一个配置类：DataSourceConfig</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> com.alibaba.druid.pool.DruidDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">//import ... 略</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Configuration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> DataSourceConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Bean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">ConfigurationProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;spring.datasource&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> DataSource</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> getDruid</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> DruidDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p><strong>4.创建实体类</strong></p><p>创建一个domain的包，用于存放实体类。在包中定义与数据库表对应的Java实体类。</p><p>示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // getters and setters 以及 toString() 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用注解的方式整合mybatis" tabindex="-1"><a class="header-anchor" href="#使用注解的方式整合mybatis"><span>使用注解的方式整合MyBatis</span></a></h3><p>相比 Spring 与 MyBatis 的整合，Spring Boot 与 MyBatis 的整合会使项目开发更加简便，同时支持XML和注解两种配置方式。</p><p>根据上述基础环境搭建完成后我们继续：</p><p><strong>5.创建Mapper接口文件</strong></p><ul><li>创建Mapper包，定义一个接口类，例如UserMapper</li></ul>`,30),l=[e];function p(h,r){return s(),a("div",null,l)}const k=i(n,[["render",p],["__file","Spring-Boot数据访问.html.vue"]]),g=JSON.parse('{"path":"/technology/backend-dev/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Spring-Boot%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE.html","title":"SpringBoot数据访问","lang":"zh-CN","frontmatter":{"title":"SpringBoot数据访问","icon":"code","date":"2024-08-31T00:00:00.000Z","category":"后端框架","tags":["SpringBoot","Web开发"],"cover":"/assets/images/Spring-Boot原理分析.jpg","excerpt":"Spring Boot对于关系型数据库和非关系型数据库的访问操作都提供了非常好的整合支持，Spring Boot整合了Spring的Spring Data用于简化数据库访问。","order":"3","description":"Spring Boot对于关系型数据库和非关系型数据库的访问操作都提供了非常好的整合支持。例如MyBaties、JPA、Redis。 Spring Boot 数据库访问概述 Spring Boot 默认采用整合Spring Data的方式统一处理数据访问层，通过添加大量自动配置，引入各种数据访问模板xxxTemplate以及统一的Repository接...","head":[["meta",{"property":"og:url","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/technology/backend-dev/%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/Spring-Boot%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE.html"}],["meta",{"property":"og:site_name","content":"哒哒的花园"}],["meta",{"property":"og:title","content":"SpringBoot数据访问"}],["meta",{"property":"og:description","content":"Spring Boot对于关系型数据库和非关系型数据库的访问操作都提供了非常好的整合支持。例如MyBaties、JPA、Redis。 Spring Boot 数据库访问概述 Spring Boot 默认采用整合Spring Data的方式统一处理数据访问层，通过添加大量自动配置，引入各种数据访问模板xxxTemplate以及统一的Repository接..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-01T15:12:28.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg"}],["meta",{"name":"twitter:image:alt","content":"SpringBoot数据访问"}],["meta",{"property":"article:author","content":"哒哒溜"}],["meta",{"property":"article:tag","content":"SpringBoot"}],["meta",{"property":"article:tag","content":"Web开发"}],["meta",{"property":"article:published_time","content":"2024-08-31T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-01T15:12:28.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SpringBoot数据访问\\",\\"image\\":[\\"https://matike16.github.io/dadagarden.github.io/dadagarden.github.io/assets/images/Spring-Boot原理分析.jpg\\"],\\"datePublished\\":\\"2024-08-31T00:00:00.000Z\\",\\"dateModified\\":\\"2024-09-01T15:12:28.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"哒哒溜\\",\\"url\\":\\"https://github.com/matike16\\"}]}"]]},"headers":[{"level":2,"title":"Spring Boot 数据库访问概述","slug":"spring-boot-数据库访问概述","link":"#spring-boot-数据库访问概述","children":[]},{"level":2,"title":"Spring Boot 整合 MyBatis","slug":"spring-boot-整合-mybatis","link":"#spring-boot-整合-mybatis","children":[{"level":3,"title":"基础环境搭建","slug":"基础环境搭建","link":"#基础环境搭建","children":[]},{"level":3,"title":"使用注解的方式整合MyBatis","slug":"使用注解的方式整合mybatis","link":"#使用注解的方式整合mybatis","children":[]}]}],"git":{"createdTime":1725077157000,"updatedTime":1725203548000,"contributors":[{"name":"matike16","email":"lda240820@gmail.com","commits":2}]},"readingTime":{"minutes":5.49,"words":1647},"filePathRelative":"technology/backend-dev/后端框架/Spring-Boot数据访问.md","localizedDate":"2024年8月31日","autoDesc":true}');export{k as comp,g as data};
